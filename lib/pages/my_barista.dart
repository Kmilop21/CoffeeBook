import 'dart:convert';
import 'package:coffeebook/pages/home_page.dart';
import 'package:coffeebook/pages/my_recipes.dart';
import 'package:coffeebook/pages/your_opinion.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart' show rootBundle;
import 'package:coffeebook/models/recipe_db.dart';

class SampleRecipe {
  final String name;
  final String instructions;
  final String image;
  final String type;
  final List<String> ingredients;
  final int preparationTime;
  final List<String> products;

  SampleRecipe({
    required this.name,
    required this.instructions,
    required this.image,
    required this.type,
    required this.ingredients,
    required this.preparationTime,
    required this.products,
  });

  factory SampleRecipe.fromMap(Map<String, dynamic> map) {
    return SampleRecipe(
      name: map['name'],
      instructions: map['instructions'],
      image: map['image'],
      type: map['type'],
      ingredients: List<String>.from(map['ingredients']),
      preparationTime: map['preparationTime'],
      products: map['products'] is String
          ? (map['products'] as String).split('|') // Split string into list
          : List<String>.from(map['products']), // Already a list
    );
  }
}

class MyBaristaPage extends StatefulWidget {
  const MyBaristaPage({
    super.key,
  });

  @override
  MyBaristaPageState createState() => MyBaristaPageState();
}

class MyBaristaPageState extends State<MyBaristaPage> {
  List<SampleRecipe> sampleRecipes = [];

  @override
  void initState() {
    super.initState();
    loadSampleRecipes();
  }

  Future<void> loadSampleRecipes() async {
    final String jsonString =
        await rootBundle.loadString('assets/samples.json');
    final Map<String, dynamic> jsonData = json.decode(jsonString);

    // Load sample recipes from JSON
    List<SampleRecipe> loadedSampleRecipes = (jsonData['recipes'] as List)
        .map((data) => SampleRecipe.fromMap(data))
        .toList();

    // Filter out recipes that are already in the database
    setState(() {
      sampleRecipes = loadedSampleRecipes.toList();
    });
  }

  Future<void> saveSampleRecipe(SampleRecipe sampleRecipe) async {
    // Create a new Recipe instance without specifying the ID, as it’s auto-incremented in the database
    final newRecipe = Recipe(
        id: null, // This will be auto-generated by the database
        name: sampleRecipe.name,
        instructions: sampleRecipe.instructions,
        image: sampleRecipe.image,
        type: sampleRecipe.type,
        ingredients: sampleRecipe.ingredients,
        preparationTime: sampleRecipe.preparationTime,
        products: sampleRecipe.products);

    await RecipeDbHelper.insertRecipe(newRecipe);

    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('${sampleRecipe.name} añadido a Mis Recetas')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color.fromARGB(255, 201, 191, 161),
      appBar: AppBar(
        backgroundColor: const Color.fromARGB(255, 146, 111, 102),
        title: const Text("Mi Barista"),
      ),
      drawer: Drawer(
        backgroundColor: const Color.fromARGB(255, 247, 232, 192),
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            const DrawerHeader(
              decoration: BoxDecoration(
                color: Colors.brown,
              ),
              child: Text(
                'Menú',
                style: TextStyle(
                  color: Colors.black,
                  fontSize: 48,
                ),
              ),
            ),
            ListTile(
              leading: const Icon(Icons.home),
              title: const Text('Inicio'),
              onTap: () {
                Navigator.pop(context);
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => const HomePage(),
                  ),
                );
              },
            ),
            ListTile(
              leading: const Icon(Icons.coffee),
              title: const Text('Mis recetas'),
              onTap: () {
                Navigator.pop(context); // Close drawer
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => const MyRecipesPage(),
                  ),
                );
              },
            ),
            ListTile(
              leading: const Icon(Icons.coffee),
              title: const Text('Mi Barista'),
              onTap: () {
                Navigator.pop(context); // Close drawer
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => const MyBaristaPage(),
                  ),
                );
              },
            ),
            ListTile(
              leading: const Icon(Icons.coffee),
              title: const Text('Tu opinión'),
              onTap: () {
                Navigator.pop(context); // Close drawer
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => const YourOpinionPage(),
                  ),
                );
              },
            ),
          ],
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: sampleRecipes.isEmpty
            ? const Center(
                child: Text(
                  "No hay recetas de la barista",
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
              )
            : ListView.builder(
                itemCount: sampleRecipes.length,
                itemBuilder: (context, index) {
                  final recipe = sampleRecipes[index];
                  return _buildRecipeCard(recipe);
                },
              ),
      ),
    );
  }

  Widget _buildRecipeCard(SampleRecipe recipe) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 8.0),
      color: const Color.fromARGB(255, 241, 235, 216),
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Image.asset(
              recipe.image,
              height: 200,
              width: double.infinity,
              fit: BoxFit.cover,
            ),
            const SizedBox(height: 8),
            Text(
              recipe.name,
              style: const TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 8),
            Text("Tipo: ${recipe.type}", style: const TextStyle(fontSize: 16)),
            const SizedBox(height: 8),
            Text("Tiempo de preparación: ${recipe.preparationTime} minutos",
                style: const TextStyle(fontSize: 16)),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: () {
                saveSampleRecipe(recipe);
              },
              child: const Text("Guardar en mis recetas para editar"),
            ),
            const SizedBox(height: 16),
            ExpansionTile(
              title: const Text("Ver detalles"),
              children: [
                const Text(
                  "Ingredientes:",
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                ),
                ...recipe.ingredients
                    .map((ingredient) => Text("• $ingredient")),
                const SizedBox(height: 16),
                const Text(
                  "Productos:",
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                ),
                ...recipe.products.map((products) => Text("• $products")),
                const SizedBox(height: 16),
                const Text(
                  "Instrucciones:",
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                ),
                Text(
                  recipe.instructions,
                  style: const TextStyle(fontSize: 16),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
